// <auto-generated />
using EF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using System;

namespace Project.Migrations.RypDb
{
    [DbContext(typeof(RypDbContext))]
    [Migration("20180408083802_RypEntities")]
    partial class RypEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("EF.Models.ElectiveGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Credits");

                    b.Property<string>("Date");

                    b.Property<string>("Name");

                    b.Property<int>("Pr");

                    b.Property<string>("Shifr");

                    b.Property<int>("TypeId");

                    b.Property<string>("UpdateDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ElectiveGroups");
                });

            modelBuilder.Entity("EF.Models.Ryp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Date");

                    b.Property<bool>("FullCheck");

                    b.Property<string>("Name");

                    b.Property<bool>("OperatorCheck");

                    b.Property<int>("SpecialtyId");

                    b.Property<string>("UpdateDate");

                    b.Property<string>("UserId");

                    b.Property<string>("Year");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Ryps");
                });

            modelBuilder.Entity("EF.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RypId");

                    b.HasKey("Id");

                    b.HasIndex("RypId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("EF.Models.SemesterElectiveGroup", b =>
                {
                    b.Property<int>("SemesterId");

                    b.Property<int>("ElectiveGroupId");

                    b.HasKey("SemesterId", "ElectiveGroupId");

                    b.HasIndex("ElectiveGroupId");

                    b.ToTable("SemesterElectiveGroups");
                });

            modelBuilder.Entity("EF.Models.SemesterSubject", b =>
                {
                    b.Property<int>("SemesterId");

                    b.Property<int>("SubjectId");

                    b.HasKey("SemesterId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SemesterSubjects");
                });

            modelBuilder.Entity("EF.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Date");

                    b.Property<string>("Name");

                    b.Property<string>("Shifr");

                    b.Property<string>("UpdateDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("EF.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Credits");

                    b.Property<string>("Date");

                    b.Property<int>("Lab");

                    b.Property<int>("Lec");

                    b.Property<string>("Name");

                    b.Property<int>("Pr");

                    b.Property<string>("Shifr");

                    b.Property<int>("TypeId");

                    b.Property<string>("UpdateDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EF.Models.SubjectElectiveGroup", b =>
                {
                    b.Property<int>("ElectiveGroupId");

                    b.Property<int>("SubjectId");

                    b.HasKey("ElectiveGroupId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectElectiveGroups");
                });

            modelBuilder.Entity("EF.Models.SubjectPrerequisiteSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PrimaryId");

                    b.Property<int>("RelatedId");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryId");

                    b.HasIndex("RelatedId");

                    b.ToTable("SubjectPrerequisiteSubjects");
                });

            modelBuilder.Entity("EF.Models.SubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Color");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SubjectTypes");
                });

            modelBuilder.Entity("EF.Models.ElectiveGroup", b =>
                {
                    b.HasOne("EF.Models.SubjectType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EF.Models.Ryp", b =>
                {
                    b.HasOne("EF.Models.Specialty", "Specialty")
                        .WithMany("Ryps")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EF.Models.Semester", b =>
                {
                    b.HasOne("EF.Models.Ryp", "Ryp")
                        .WithMany("Semesters")
                        .HasForeignKey("RypId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EF.Models.SemesterElectiveGroup", b =>
                {
                    b.HasOne("EF.Models.ElectiveGroup", "ElectiveGroup")
                        .WithMany("SemesterElectiveGroups")
                        .HasForeignKey("ElectiveGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EF.Models.Semester", "Semester")
                        .WithMany("SemesterElectiveGroups")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EF.Models.SemesterSubject", b =>
                {
                    b.HasOne("EF.Models.Semester", "Semester")
                        .WithMany("SemesterSubjects")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EF.Models.Subject", "Subject")
                        .WithMany("SemesterSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EF.Models.Subject", b =>
                {
                    b.HasOne("EF.Models.SubjectType", "Type")
                        .WithMany("Subjects")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EF.Models.SubjectElectiveGroup", b =>
                {
                    b.HasOne("EF.Models.ElectiveGroup", "ElectiveGroup")
                        .WithMany("SubjectElectiveGroups")
                        .HasForeignKey("ElectiveGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EF.Models.Subject", "Subject")
                        .WithMany("SubjectElectiveGroups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EF.Models.SubjectPrerequisiteSubject", b =>
                {
                    b.HasOne("EF.Models.Subject", "Primary")
                        .WithMany("RelatedItems")
                        .HasForeignKey("PrimaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EF.Models.Subject", "Related")
                        .WithMany("RelatedTo")
                        .HasForeignKey("RelatedId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
